#include <iostream>
#include <vector>

/*  
    DP로 진행한다.
    n일차에 벌 수 있는 각 최대 수익을 계산한다



    기본은 1이 n개이다.
    1 두개는 2로 변환될 수 있음.
    1 세 개도 3으로 변환될 수 있음
    2 + 1도 마찬가지


    일단 가능한 숫자 조합을 모두 찾기. 3과 2가 몆 개 들어가는지만 파악하면 나머지는 1로 채우면 되므로 별 문제가 없다
    그러므로 2가 n개, 3이 m개 들어간 경우에 대해 (n, m)으로 표현하자.

    이제 주어진 숫자에 2와 3의 조합을 찾을 것
    예를 들어 주어진 숫자가 9라면, 9 / 3을 먼저 수행한다.
    결과가 3이므로, 3은 최대 3개 들어갈 수 있다. 그럼 3을 0개부터 3개까지 넣어본다.

    1) 3이 0개 들어간 경우
    9 - (3 x 0) = 9이므로 남은 값은 9이다.
    9 / 2 = 4이므로 3이 0개인 경우에 2는 최대 4개 들어갈 수 있다. 
    따라서 이 경우 (0, 0), (1, 0), (2, 0), (3, 0), (4, 0)

    2) 3이 1개 들어간 경우
    9 - (3x1) = 6이고, 6 / 2 = 3이므로 3개 까지 들어갈 수 있음
    (0, 1) (1, 1) (2, 1) (3, 1) 가능

    ... 반복해서 모든 순서쌍을 구한다.
    그리고 각 순서쌍을 숫자 조합으로 바꾼 후에 가능한 배치를 모두 수행한다.

    배치 방법을 생각해보면, 각 
    
    (a, b)인 경우, 총 배치 가능한 칸의 개수는 n - a - 2b칸이 된다.

    예를 들어 값이 5이고, (2, 0)인 경우 배치 가능한 칸 수는 5 - 2 = 3칸이다.
    3칸 내에 2가 2개, 1이 1개 들어가는 것
    가능한 조합을 모두 찾기


*/

using namespace std;
int main() {
    int N;
    cin >> N;

    vector<long long> dp(N + 2, 0);

    for (int i = 1; i <= N; i++) {
        long time, money;
        cin >> time >> money;

        // 오늘 수익이 어제 수익보다 적다면, 그냥 어제까지처럼 일 하고 하루 쉬는 게 돈을 더 많이 번다.
        if (dp[i] < dp[i - 1]) {
            dp[i] = dp[i - 1];
        }

        // 시간이 초과되는 일은 할 수 없다. 그냥 넘기기
        if (time + i > N + 1) {
            continue;
        }

        // 오늘 일을 하는 경우, 끝나는 날과 그 때의 돈 계산
        long long time_passed = i + time;
        long long money_earned = dp[i] + money;

        // 오늘 일을 하는 게 그 날의 최대 수익이라면, 일을 했다 친다.
        if (dp[time_passed] < money_earned) {
            dp[time_passed] = money_earned;
            // cout << i << "번째 날에 일을 하면 " << time_passed << "일에 최대 수익 획득 가능" << endl;
        }

        // for (int i = 1; i <= N + 1; i++) {
        //     cout << "DP[" << i << "] = " << dp[i] << endl;
        // }
    }

    // 마지막 날도 만약 그 전 날보다 돈을 덜 벌었다면 그냥 그 전날에 일을 안 하는게 나은 것
    if (dp[N + 1] < DP[N]) {
        cout << dp[N] << endl;
    } else {
        cout << dp[N + 1] << endl;
    }
    return 0;
}